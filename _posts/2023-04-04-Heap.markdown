---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: Heap
title: Heap

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
# author: Mr. Green's Workshop
# multiple category is not supported
category: 코딩테스트
# multiple tag entries are possible
tags: [백준, 자료구조, Heap, 그리디알고리즘]
# thumbnail image for post
img: ""
# disable comments on this page
#comments_disable: true

# publish date
date: 2023-04-04 20:00:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

Heap : 백준 11000번

<!-- outline-end -->

# Heap
push와 pop이 발생할 때마다 정렬이 되는 자료구조이다.

`import heapq`를 작성하여 이용할 수 있다. 

생성은 리스트로 하면되고, value를 push, pop할 때만 `heappush(list, value)`와 `heappop(list)`를 사용하며, 예시는 다음과 같다.
```python
import heapq
Heap = []

heapq.heappush(Heap, 5)
heapq.heappush(Heap, 2)
heapq.heappush(Heap, 4)
heapq.heappush(Heap, 1)
heapq.heappush(Heap, 8)
print(Heap)

# [1, 2, 4, 5, 8]

heapq.heappop(Heap)
heapq.heappop(Heap)
print(Heap)

# [4, 5, 8]
```
# 백준 11000 강의실 배정
## 문제
수강신청의 마스터 김종혜 선생님에게 새로운 과제가 주어졌다. 

김종혜 선생님한테는 Si에 시작해서 Ti에 끝나는 N개의 수업이 주어지는데, 최소의 강의실을 사용해서 모든 수업을 가능하게 해야 한다. 

참고로, 수업이 끝난 직후에 다음 수업을 시작할 수 있다. (즉, Ti ≤ Sj 일 경우 i 수업과 j 수업은 같이 들을 수 있다.)

수강신청 대충한 게 찔리면, 선생님을 도와드리자!
## 입력
첫 번째 줄에 N이 주어진다. (1 ≤ N ≤ 200,000)

이후 N개의 줄에 Si, Ti가 주어진다. (0 ≤ Si < Ti ≤ 10^9)
## 출력
강의실의 개수를 출력하라.
## 예제입력1
```
3
1 3
2 4
3 5
```
## 예제출력1
```
2
```
우선 모든 강의를 [시작시간, 종료시간]으로 Class list에 입력 후 시작시간 순서로 정렬한다.

그 후 가장 먼저 열리고 빨리 끝나는 수업의 종료시각을 heap에 push한다.

그 다음 수업이 시작되기 전에 수업이 끝나는 강의가 있으면 새로운 강의실을 배정하지 않아도 된다.
`다음 수업의 시작시각`과 `기존에 진행중인 수업들 중 가장 빨리 끝나는 수업의 종료시각`을 비교한다. 

`다음 수업의 시작시각`이 더 늦는다면, `기존에 진행중인 수업들 중 가장 빨리 끝나는 수업의 종료시각`이 끝난 뒤에 강의실이 비워지기 때문에 heap에서 pop할 수 있다.

강의가 먼저 끝나서 pop을 하는 것과 관계 없이 새로 수업을 시작하게 되면 heap에 push하면 된다.

즉, pop보다 push가 같거나 많을 수밖에 없는 구조이다. 

만약 초반에 겹치는 강의가 많아서 강의실을 많이 사용하다가, 후반에 1개만 쓰게 되더라도 사용이 끝난 강의실은 그대로 비어있고 흔적이 heap에 남겨져있다.

그러므로, heap의 전체 개수를 출력하면 여태까지 동시에 최대로 사용한 강의실의 개수가 된다.


## 전체코드
```python
import heapq
import sys

N = int(sys.stdin.readline())
Class = []
for _ in range(N):
    Class.append(list(map(int, sys.stdin.readline().split())))
Class.sort()

heap = []

heapq.heappush(heap, Class[0][1])
for index in range(1, N):
    if(Class[index][0]>=heap[0]):
        heapq.heappop(heap)
    heapq.heappush(heap, Class[index][1])
print(len(heap))
```